branches:
  only:
  - master

language: minimal

env:
  - SERVER_USER=ec2-user SERVER_DNS=ec2-35-180-69-65.eu-west-3.compute.amazonaws.com

before_install:
  - openssl aes-256-cbc -K $encrypted_2c430460807a_key -iv $encrypted_2c430460807a_iv -in travis.pem.enc -out ./travis.pem -d

script:
  - chmod 400 travis.pem
  # Build container with application
  - docker build . -t bot:latest
  # Save images to targ
  - docker save -o ./bot.tar bot:latest
  # Send tar to EC2 instances
  - scp -o StrictHostKeyChecking=no -i "travis.pem" ./bot.tar $SERVER_USER@$SERVER_DNS:~/bot.tar
  # Process env file
  - cat .env-sample > .env
  - scp -o StrictHostKeyChecking=no -i "travis.pem" ./.env $SERVER_USER@$SERVER_DNS:~/.env
  - ssh -i "travis.pem" -t $SERVER_USER@$SERVER_DNS "mkdir -p ~/postgresql/migrations"
  - scp -o StrictHostKeyChecking=no -i "travis.pem" ./postgresql/.env $SERVER_USER@$SERVER_DNS:~/postgresql/.env
  # Copy migrations
  - scp -o StrictHostKeyChecking=no -i "travis.pem" -r ./postgresql/migrations $SERVER_USER@$SERVER_DNS:~/postgresql
  # Copy docker compose
  - scp -o StrictHostKeyChecking=no -i "travis.pem" ./docker-compose.yml $SERVER_USER@$SERVER_DNS:~/docker-compose.yml 
  - scp -o StrictHostKeyChecking=no -i "travis.pem" ./docker-compose.production.yml $SERVER_USER@$SERVER_DNS:~/docker-compose.production.yml
  # Copy postgresql postgresql updater
  - scp -o StrictHostKeyChecking=no -i "travis.pem" ./deploy/postgresql_updater.sh $SERVER_USER@$SERVER_DNS:~/postgresql_updater.sh
  - ssh -i "travis.pem" -t $SERVER_USER@$SERVER_DNS "chmod 555 ~/postgresql_updater.sh"
  # Upload images
  - ssh -i "travis.pem" -t $SERVER_USER@$SERVER_DNS "docker load -i bot.tar"
  # Run containers
  - ssh -i "travis.pem" -t $SERVER_USER@$SERVER_DNS "docker-compose -f docker-compose.yml -f docker-compose.production.yml up --force-recreate -d bot"
  # Run postgresql
  - ssh -i "travis.pem" -t $SERVER_USER@$SERVER_DNS "./postgresql_updater.sh"
